version: 2.1

orbs:
  gcp-gke: circleci/gcp-gke@2.2
  gcp-gcr: circleci/gcp-gcr@0.16
  shellcheck: circleci/shellcheck@3.2.0 # https://circleci.com/developer/orbs/orb/circleci/shellcheck
  gcp-cli: circleci/gcp-cli@3.1
  helm: circleci/helm@2.0

global_context: &global_context
  context:
    - ngnetwork_pro

parameters:
  registry-url:
    type: string
    default: "us-east1-docker.pkg.dev"
  gke-cluster:
    type: string
    default: "ng-autopilot-cluster-1"

jobs:
  shellcheck:
    executor: gcp-gcr/default
    steps:
      - checkout
      - shellcheck/install
      - shellcheck/check:
          dir: ./
          ignore-dirs: |
            ./.git
            
  test:
    executor: gcp-gcr/default
    steps:
      - checkout
      - run:
          command: |
            #!/bin/bash

            echo "You are expected to implement the proper tests for you repositories."



  build-and-push:
    executor: gcp-gcr/default
    parameters:
      gcloud-service-key:
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
        description: The gcloud service key
      google-project-id:
        type: env_var_name
        default: GOOGLE_PROJECT_ID
        description: >
          Environment variable name for the Google project ID to connect with
          via the gcloud CLI
      google-compute-zone:
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
        description: >
          The Google compute zone to connect with via the gcloud CLI
      google-compute-region:
        type: env_var_name
        default: GOOGLE_COMPUTE_REGION
        description: >
          The Google compute region to connect with via the gcloud CLI
      gke-cluster:
        type: env_var_name
        default: GKE_CLUSTER
        description: >
          The Google Kubernetes Engine cluster name
      enable_publish: 
        description: |
          Include the Publish conditions.  Useful when publishing on specific branches.
        type: boolean
        default: true
      enable_oci: 
        description: |
          Utilize OCI Docker Registry via GAR set to true.
        type: boolean
        default: true
      chart-version: 
        description: |
          specify the exact chart version to use. If this is not specified, the version is created based CIRCLE_BUILD_NUM
        type: string
        default: "1.0.0"
      chart-dir:
        description: |
          Specify a chart reference (default current working dir)
          or a path to an unpacked chart directory (e.g. ./nginx)
        type: string
        default: "."
      chart-repo:
        description: |
          The url for the helm chart repository used as part of helm repo publish
          command.  Current support for OCI Docker Registry in GAR requires enable_oci=True
        type: string
        default: "us-east1-docker.pkg.dev/vpc-dev-31480/lab"
      helm-version:
        type: string
        default: "v3.11.1"
        description: the helm client version to install. e.g. v3.11.1
    steps:
      - checkout
      - run:
          name: Setup 
          command: | 
            echo $GOOGLE_PROJECT_ID
      - gcp-cli/setup:
          google_project_id: <<parameters.google-project-id>>
          google_compute_zone: <<parameters.google-compute-zone>>
          google_compute_region: <<parameters.google-compute-region>>
          gcloud_service_key: <<parameters.gcloud-service-key>>
          components: "kubectl gke-gcloud-auth-plugin docker-credential-gcr"
      - helm/install-helm-client:
          version: << parameters.helm-version >>
      - gcp-gcr/gcr-auth:
          registry-url: << pipeline.parameters.registry-url >>
      - run: 
          name: Configure Kubectl and Helm
          environment:
            ORB_ENV_GKE_CLUSTER: <<parameters.gke-cluster>>
            ORB_VAL_REGISTRY_URL: << pipeline.parameters.registry-url >>
          command: bash scripts/kubectl.sh
      - when:
          condition: <<parameters.chart-version>>
          steps:
            - run:
                name: Setup Environment Variables
                environment:
                  CHART_VERSION: <<parameters.chart-version>>
                command: |
                  echo "export CHART_VERSION=$(eval echo ${CHART_VERSION})" >> "$BASH_ENV"
      - unless:
          condition: <<parameters.chart-version>>
          steps:
            - run:
                name: Setup Environment Variables
                command: |
                  echo 'export CHART_VERSION="1.0.${CIRCLE_BUILD_NUM}"' >> "$BASH_ENV"
      - run:
          name: Helm Lint
          command: |
            helm lint  <<parameters.chart-dir>>
      - run:
          name: Helm Package
          command: |
            helm package --version=${CHART_VERSION} <<parameters.chart-dir>>
      - run:
          name: Store Artifact
          command: |
            mkdir -p /tmp/helm-chart
            cp -v *-${CHART_VERSION}.tgz  /tmp/helm-chart
      - store_artifacts:
          path: /tmp/helm-chart
      - when:
          condition:
            and:
              - <<parameters.enable_publish>>
              - <<parameters.enable_oci>>
          steps:
            - run:
                name: Helm Push
                command: "helm push /tmp/helm-chart/*-${CHART_VERSION}.tgz oci://<<parameters.chart-repo>>"
            - run:
                name: Check Package
                command: "gcloud artifacts docker images list <<parameters.chart-repo>> --include-tags | grep ${CHART_VERSION} || exit 1"
      - when:
          condition:
            and:
              - <<parameters.enable_publish>>
              - equal: [false, << parameters.enable_oci >>]
          steps:
            - run:
                name: Helm Push
                command: "helm push /tmp/helm-chart/*-${CHART_VERSION}.tgz <<parameters.chart-repo>>"
      
  deploy:
    parameters:
      chart:
        description: |
          Specify for upgrade a chart reference (e.g. stable/mariadb),
          or a path to a packaged chart (e.g. ./nginx-1.2.3.tgz),
          or a path to an unpacked chart directory (e.g. ./nginx)
          or an absolute URL (e.g. https://example.com/charts/nginx-1.2.3.tgz)
        type: string
        default: "mutillidae"
      add-repo:
        description: |
          The url for the helm chart repository used as part of helm repo add
          command
        type: string
        default: "oci://us-east1-docker.pkg.dev/vpc-dev-31480/lab/mutillidae"
      release-name:
        description: |
          Specify a name for the release.
        type: string
        default: ""
      namespace:
        description: |
          The kubernetes namespace that should be used.
        type: string
        default: "mutillidae"
      wait:
        description: |
          Whether to wait for the installation to be complete.
        type: boolean
        default: true
      timeout:
        description: |
          If timeout is reached, the release will be marked as FAILED.
        type: string
        default: ""
      no-hooks:
        description: |
          This skips running hooks for the command
        type: boolean
        default: false
      devel:
        description: |
          Use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
        type: string
        default: ""
      dry-run:
        description: |
          simulate an upgrade
        type: boolean
        default: false
      force:
        description: |
          Use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
        type: boolean
        default: false
      reset-values:
        description: |
          when upgrading, reset the values to the ones built into the chart
        type: boolean
        default: false
      reuse-values:
        description: |
          when upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored.
        type: boolean
        default: false
      values:
        description: |
          specify values in a YAML file or a URL
        type: string
        default: ""
      version:
        description: |
          specify the exact chart version to use. If this is not specified, the latest version is used
        type: string
        default: ""
      recreate-pods:
        description: |
          performs pods restart for the resource if applicable
        type: boolean
        default: false
      values-to-override:
        description: |
          Override values in a chart using the --set flag of the helm upgrade
          command. Format: key1=val1,key2=val2
        type: string
        default: ""
      update-repositories:
        description: |
          Choose to update repositories by running helm repo update.
        type: boolean
        default: true
      no-output-timeout:
        description: |
          Elapsed time that the helm command can run on CircleCI without output.
          The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
        type: string
        default: "30m"
      atomic:
        description: |
          if set, upgrade process rolls back changes made in case of failed upgrade.
          The --wait flag will be set automatically if --atomic is used
        type: boolean
        default: false
      #
      gcloud-service-key:
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
        description: The gcloud service key
      google-project-id:
        type: env_var_name
        default: GOOGLE_PROJECT_ID
        description: >
          Environment variable name for the Google project ID to connect with
          via the gcloud CLI
      google-compute-zone:
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
        description: >
          The Google compute zone to connect with via the gcloud CLI
      google-compute-region:
        type: env_var_name
        default: GOOGLE_COMPUTE_REGION
        description: >
          The Google compute region to connect with via the gcloud CLI
      gke-cluster:
        type: env_var_name
        default: GKE_CLUSTER
        description: >
          The Google Kubernetes Engine cluster name
    executor: gcp-cli/default
    steps:
      - checkout
      - helm/install-helm-client
      - gcp-cli/setup:
          gcloud_service_key: GCLOUD_SERVICE_KEY
          google_project_id: GOOGLE_PROJECT_ID
      - run:
          name: Upgrade, update, or install chart
          environment:
            TIMEOUT: << parameters.timeout >>
            ATOMIC: << parameters.atomic >>
            ORB_PARAM_WAIT: << parameters.wait >>
            NO_HOOKS: << parameters.no-hooks >>
            RECREATE_PODS: << parameters.recreate-pods >>
            ORB_PARAM_NAMESPACE: << parameters.namespace >>
            DEVEL: << parameters.devel >>
            DRY_RUN: << parameters.dry-run >>
            RESET_VALUES: << parameters.reset-values >>
            REUSE_VALUES: << parameters.reuse-values >>
            VALUES: << parameters.values >>
            VERSION: << parameters.version >>
            VALUES_TO_OVERRIDE: << parameters.values-to-override >>
            ORB_PARAM_CHART: << parameters.chart >>
            ORB_PARAM_RELEASE_NAME: << parameters.release-name >>
            ORB_PARAM_REPO: << parameters.add-repo >>
          command: bash scripts/helm-chart.sh
          no_output_timeout: << parameters.no-output-timeout >>



workflows:
  test-build-deploy:
    jobs:
      - shellcheck
      - test
      - build-and-push:
          context: ngnetwork_pro
          requires:
            - shellcheck
            - test
      - deploy:
          context: ngnetwork_pro
          requires:
            - build-and-push